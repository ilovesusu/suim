// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: v1/user.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//好友操作枚举
type FriendHandle int32

const (
	FriendHandle_UNKNOWN_COMMAND FriendHandle = 0 //未知操作
	FriendHandle_ADD_FRIEND      FriendHandle = 1 //添加好友
	FriendHandle_PASS_FRIEND     FriendHandle = 2 //通过好友申请
	FriendHandle_BLACK_FRIEND    FriendHandle = 3 //拉黑好友
	FriendHandle_DELETE_FRIEND   FriendHandle = 4 //删除好友
)

// Enum value maps for FriendHandle.
var (
	FriendHandle_name = map[int32]string{
		0: "UNKNOWN_COMMAND",
		1: "ADD_FRIEND",
		2: "PASS_FRIEND",
		3: "BLACK_FRIEND",
		4: "DELETE_FRIEND",
	}
	FriendHandle_value = map[string]int32{
		"UNKNOWN_COMMAND": 0,
		"ADD_FRIEND":      1,
		"PASS_FRIEND":     2,
		"BLACK_FRIEND":    3,
		"DELETE_FRIEND":   4,
	}
)

func (x FriendHandle) Enum() *FriendHandle {
	p := new(FriendHandle)
	*p = x
	return p
}

func (x FriendHandle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendHandle) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_user_proto_enumTypes[0].Descriptor()
}

func (FriendHandle) Type() protoreflect.EnumType {
	return &file_v1_user_proto_enumTypes[0]
}

func (x FriendHandle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendHandle.Descriptor instead.
func (FriendHandle) EnumDescriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{0}
}

//hello请求参数
type HelloReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HelloReq) Reset() {
	*x = HelloReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloReq) ProtoMessage() {}

func (x *HelloReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloReq.ProtoReflect.Descriptor instead.
func (*HelloReq) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{0}
}

func (x *HelloReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//hello响应参数
type HelloRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hello string `protobuf:"bytes,1,opt,name=hello,proto3" json:"hello,omitempty"`
}

func (x *HelloRsp) Reset() {
	*x = HelloRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRsp) ProtoMessage() {}

func (x *HelloRsp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRsp.ProtoReflect.Descriptor instead.
func (*HelloRsp) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{1}
}

func (x *HelloRsp) GetHello() string {
	if x != nil {
		return x.Hello
	}
	return ""
}

//创建用户请求参数
type UserCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Phone             string                  `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Nickname          string                  `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Sex               int32                   `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`
	AvatarUrl         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Introduce         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=introduce,proto3" json:"introduce,omitempty"`
	SnapCall          bool                    `protobuf:"varint,7,opt,name=snap_call,json=snapCall,proto3" json:"snap_call,omitempty"`
	AddFriendType     int32                   `protobuf:"varint,8,opt,name=add_friend_type,json=addFriendType,proto3" json:"add_friend_type,omitempty"`
	FriendPassProblem *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=friend_pass_problem,json=friendPassProblem,proto3" json:"friend_pass_problem,omitempty"`
	FriendPassAnswer  *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=friend_pass_answer,json=friendPassAnswer,proto3" json:"friend_pass_answer,omitempty"`
	Password          string                  `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	IdCard            *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
}

func (x *UserCreateReq) Reset() {
	*x = UserCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCreateReq) ProtoMessage() {}

func (x *UserCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCreateReq.ProtoReflect.Descriptor instead.
func (*UserCreateReq) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{2}
}

func (x *UserCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserCreateReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserCreateReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserCreateReq) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserCreateReq) GetAvatarUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.AvatarUrl
	}
	return nil
}

func (x *UserCreateReq) GetIntroduce() *wrapperspb.StringValue {
	if x != nil {
		return x.Introduce
	}
	return nil
}

func (x *UserCreateReq) GetSnapCall() bool {
	if x != nil {
		return x.SnapCall
	}
	return false
}

func (x *UserCreateReq) GetAddFriendType() int32 {
	if x != nil {
		return x.AddFriendType
	}
	return 0
}

func (x *UserCreateReq) GetFriendPassProblem() *wrapperspb.StringValue {
	if x != nil {
		return x.FriendPassProblem
	}
	return nil
}

func (x *UserCreateReq) GetFriendPassAnswer() *wrapperspb.StringValue {
	if x != nil {
		return x.FriendPassAnswer
	}
	return nil
}

func (x *UserCreateReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserCreateReq) GetIdCard() *wrapperspb.StringValue {
	if x != nil {
		return x.IdCard
	}
	return nil
}

//创建用户响应参数
type UserCreateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserCreateRsp) Reset() {
	*x = UserCreateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCreateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCreateRsp) ProtoMessage() {}

func (x *UserCreateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCreateRsp.ProtoReflect.Descriptor instead.
func (*UserCreateRsp) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{3}
}

//更新用户请求参数
type UserUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phone             *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Nickname          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Sex               *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=sex,proto3" json:"sex,omitempty"`
	AvatarUrl         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Introduce         *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=introduce,proto3" json:"introduce,omitempty"`
	SnapCall          *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=snap_call,json=snapCall,proto3" json:"snap_call,omitempty"`
	AddFriendType     *wrapperspb.Int32Value  `protobuf:"bytes,9,opt,name=add_friend_type,json=addFriendType,proto3" json:"add_friend_type,omitempty"`
	FriendPassProblem *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=friend_pass_problem,json=friendPassProblem,proto3" json:"friend_pass_problem,omitempty"`
	FriendPassAnswer  *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=friend_pass_answer,json=friendPassAnswer,proto3" json:"friend_pass_answer,omitempty"`
	Password          *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=password,proto3" json:"password,omitempty"`
	IdCard            *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
}

func (x *UserUpdateReq) Reset() {
	*x = UserUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUpdateReq) ProtoMessage() {}

func (x *UserUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUpdateReq.ProtoReflect.Descriptor instead.
func (*UserUpdateReq) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{4}
}

func (x *UserUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserUpdateReq) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UserUpdateReq) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *UserUpdateReq) GetNickname() *wrapperspb.StringValue {
	if x != nil {
		return x.Nickname
	}
	return nil
}

func (x *UserUpdateReq) GetSex() *wrapperspb.Int32Value {
	if x != nil {
		return x.Sex
	}
	return nil
}

func (x *UserUpdateReq) GetAvatarUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.AvatarUrl
	}
	return nil
}

func (x *UserUpdateReq) GetIntroduce() *wrapperspb.StringValue {
	if x != nil {
		return x.Introduce
	}
	return nil
}

func (x *UserUpdateReq) GetSnapCall() *wrapperspb.BoolValue {
	if x != nil {
		return x.SnapCall
	}
	return nil
}

func (x *UserUpdateReq) GetAddFriendType() *wrapperspb.Int32Value {
	if x != nil {
		return x.AddFriendType
	}
	return nil
}

func (x *UserUpdateReq) GetFriendPassProblem() *wrapperspb.StringValue {
	if x != nil {
		return x.FriendPassProblem
	}
	return nil
}

func (x *UserUpdateReq) GetFriendPassAnswer() *wrapperspb.StringValue {
	if x != nil {
		return x.FriendPassAnswer
	}
	return nil
}

func (x *UserUpdateReq) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *UserUpdateReq) GetIdCard() *wrapperspb.StringValue {
	if x != nil {
		return x.IdCard
	}
	return nil
}

//更新用户响应参数
type UserUpdateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserUpdateRsp) Reset() {
	*x = UserUpdateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUpdateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUpdateRsp) ProtoMessage() {}

func (x *UserUpdateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUpdateRsp.ProtoReflect.Descriptor instead.
func (*UserUpdateRsp) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{5}
}

//删除用户请求参数
type UserDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserDeleteReq) Reset() {
	*x = UserDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeleteReq) ProtoMessage() {}

func (x *UserDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeleteReq.ProtoReflect.Descriptor instead.
func (*UserDeleteReq) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{6}
}

func (x *UserDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

//删除用户响应参数
type UserDeleteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserDeleteRsp) Reset() {
	*x = UserDeleteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeleteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeleteRsp) ProtoMessage() {}

func (x *UserDeleteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeleteRsp.ProtoReflect.Descriptor instead.
func (*UserDeleteRsp) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{7}
}

//用户信息请求参数
type UserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserInfoReq) Reset() {
	*x = UserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoReq) ProtoMessage() {}

func (x *UserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoReq.ProtoReflect.Descriptor instead.
func (*UserInfoReq) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{8}
}

func (x *UserInfoReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

//用户信息响应参数
type UserInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phone             string                  `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Nickname          string                  `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Sex               int32                   `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`
	AvatarUrl         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Introduce         *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=introduce,proto3" json:"introduce,omitempty"`
	SnapCall          bool                    `protobuf:"varint,8,opt,name=snap_call,json=snapCall,proto3" json:"snap_call,omitempty"`
	AddFriendType     int32                   `protobuf:"varint,9,opt,name=add_friend_type,json=addFriendType,proto3" json:"add_friend_type,omitempty"`
	FriendPassProblem *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=friend_pass_problem,json=friendPassProblem,proto3" json:"friend_pass_problem,omitempty"`
	FriendPassAnswer  *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=friend_pass_answer,json=friendPassAnswer,proto3" json:"friend_pass_answer,omitempty"`
}

func (x *UserInfoRsp) Reset() {
	*x = UserInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoRsp) ProtoMessage() {}

func (x *UserInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoRsp.ProtoReflect.Descriptor instead.
func (*UserInfoRsp) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{9}
}

func (x *UserInfoRsp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInfoRsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfoRsp) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfoRsp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfoRsp) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserInfoRsp) GetAvatarUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.AvatarUrl
	}
	return nil
}

func (x *UserInfoRsp) GetIntroduce() *wrapperspb.StringValue {
	if x != nil {
		return x.Introduce
	}
	return nil
}

func (x *UserInfoRsp) GetSnapCall() bool {
	if x != nil {
		return x.SnapCall
	}
	return false
}

func (x *UserInfoRsp) GetAddFriendType() int32 {
	if x != nil {
		return x.AddFriendType
	}
	return 0
}

func (x *UserInfoRsp) GetFriendPassProblem() *wrapperspb.StringValue {
	if x != nil {
		return x.FriendPassProblem
	}
	return nil
}

func (x *UserInfoRsp) GetFriendPassAnswer() *wrapperspb.StringValue {
	if x != nil {
		return x.FriendPassAnswer
	}
	return nil
}

//用户列表请求参数
type UserListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FriendStatus int32 `protobuf:"varint,2,opt,name=friend_status,json=friendStatus,proto3" json:"friend_status,omitempty"`
}

func (x *UserListReq) Reset() {
	*x = UserListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListReq) ProtoMessage() {}

func (x *UserListReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListReq.ProtoReflect.Descriptor instead.
func (*UserListReq) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{10}
}

func (x *UserListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserListReq) GetFriendStatus() int32 {
	if x != nil {
		return x.FriendStatus
	}
	return 0
}

//用户列表响应参数
type UserListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*UserListRsp_List `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int32               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *UserListRsp) Reset() {
	*x = UserListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListRsp) ProtoMessage() {}

func (x *UserListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListRsp.ProtoReflect.Descriptor instead.
func (*UserListRsp) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{11}
}

func (x *UserListRsp) GetList() []*UserListRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *UserListRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

//好友操作请求参数
type FriendHandleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Fid         int64 `protobuf:"varint,2,opt,name=fid,proto3" json:"fid,omitempty"`
	CommandType int32 `protobuf:"varint,3,opt,name=command_type,json=commandType,proto3" json:"command_type,omitempty"`
}

func (x *FriendHandleReq) Reset() {
	*x = FriendHandleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendHandleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendHandleReq) ProtoMessage() {}

func (x *FriendHandleReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendHandleReq.ProtoReflect.Descriptor instead.
func (*FriendHandleReq) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{12}
}

func (x *FriendHandleReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FriendHandleReq) GetFid() int64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *FriendHandleReq) GetCommandType() int32 {
	if x != nil {
		return x.CommandType
	}
	return 0
}

//好友操作响应参数
type FriendHandleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FriendHandleRsp) Reset() {
	*x = FriendHandleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendHandleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendHandleRsp) ProtoMessage() {}

func (x *FriendHandleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendHandleRsp.ProtoReflect.Descriptor instead.
func (*FriendHandleRsp) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{13}
}

type UserListRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64                   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Nickname     string                  `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Sex          int32                   `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`
	AvatarUrl    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Introduce    *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=introduce,proto3" json:"introduce,omitempty"`
	FriendRemake *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=friend_remake,json=friendRemake,proto3" json:"friend_remake,omitempty"`
}

func (x *UserListRsp_List) Reset() {
	*x = UserListRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListRsp_List) ProtoMessage() {}

func (x *UserListRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListRsp_List.ProtoReflect.Descriptor instead.
func (*UserListRsp_List) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{11, 0}
}

func (x *UserListRsp_List) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserListRsp_List) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserListRsp_List) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserListRsp_List) GetAvatarUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.AvatarUrl
	}
	return nil
}

func (x *UserListRsp_List) GetIntroduce() *wrapperspb.StringValue {
	if x != nil {
		return x.Introduce
	}
	return nil
}

func (x *UserListRsp_List) GetFriendRemake() *wrapperspb.StringValue {
	if x != nil {
		return x.FriendRemake
	}
	return nil
}

var File_v1_user_proto protoreflect.FileDescriptor

var file_v1_user_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1e, 0x0a, 0x08, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x08, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x22, 0xf7, 0x04, 0x0a, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x0b,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x03,
	0x73, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06,
	0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x0a, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x0f, 0x61,
	0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x30, 0x01, 0x30, 0x02, 0x30,
	0x03, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x55, 0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x53, 0x0a, 0x12, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x10, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x08, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x3f, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x12, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x73, 0x70, 0x22, 0xde, 0x06, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x0b,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x73, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x30, 0x01, 0x30, 0x02, 0x30,
	0x03, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x88,
	0x01, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x6e, 0x61,
	0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x50, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x30,
	0x01, 0x30, 0x02, 0x30, 0x03, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x53, 0x0a, 0x12, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x10,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x08, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x12, 0x52, 0x06, 0x69, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x28, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x0f, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x73, 0x70,
	0x22, 0x26, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcd, 0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78,
	0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6e, 0x61,
	0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c,
	0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x12,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x61,
	0x73, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x20, 0x00, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xd6, 0x02, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x89, 0x02,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x3b, 0x0a,
	0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x22, 0x79, 0x0a, 0x0f, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02,
	0x20, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x03, 0x66,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x1a, 0x08, 0x30,
	0x01, 0x30, 0x02, 0x30, 0x03, 0x30, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x2a, 0x69, 0x0a, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x44, 0x44, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x41, 0x53, 0x53, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x10, 0x04, 0x32, 0xd5, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x09, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x09, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0x2e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x2e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x2e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x28, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x73, 0x75,
	0x69, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_v1_user_proto_rawDescOnce sync.Once
	file_v1_user_proto_rawDescData = file_v1_user_proto_rawDesc
)

func file_v1_user_proto_rawDescGZIP() []byte {
	file_v1_user_proto_rawDescOnce.Do(func() {
		file_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_user_proto_rawDescData)
	})
	return file_v1_user_proto_rawDescData
}

var file_v1_user_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_v1_user_proto_goTypes = []interface{}{
	(FriendHandle)(0),              // 0: FriendHandle
	(*HelloReq)(nil),               // 1: HelloReq
	(*HelloRsp)(nil),               // 2: HelloRsp
	(*UserCreateReq)(nil),          // 3: UserCreateReq
	(*UserCreateRsp)(nil),          // 4: UserCreateRsp
	(*UserUpdateReq)(nil),          // 5: UserUpdateReq
	(*UserUpdateRsp)(nil),          // 6: UserUpdateRsp
	(*UserDeleteReq)(nil),          // 7: UserDeleteReq
	(*UserDeleteRsp)(nil),          // 8: UserDeleteRsp
	(*UserInfoReq)(nil),            // 9: UserInfoReq
	(*UserInfoRsp)(nil),            // 10: UserInfoRsp
	(*UserListReq)(nil),            // 11: UserListReq
	(*UserListRsp)(nil),            // 12: UserListRsp
	(*FriendHandleReq)(nil),        // 13: FriendHandleReq
	(*FriendHandleRsp)(nil),        // 14: FriendHandleRsp
	(*UserListRsp_List)(nil),       // 15: UserListRsp.List
	(*wrapperspb.StringValue)(nil), // 16: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),  // 17: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),   // 18: google.protobuf.BoolValue
}
var file_v1_user_proto_depIdxs = []int32{
	16, // 0: UserCreateReq.avatar_url:type_name -> google.protobuf.StringValue
	16, // 1: UserCreateReq.introduce:type_name -> google.protobuf.StringValue
	16, // 2: UserCreateReq.friend_pass_problem:type_name -> google.protobuf.StringValue
	16, // 3: UserCreateReq.friend_pass_answer:type_name -> google.protobuf.StringValue
	16, // 4: UserCreateReq.id_card:type_name -> google.protobuf.StringValue
	16, // 5: UserUpdateReq.name:type_name -> google.protobuf.StringValue
	16, // 6: UserUpdateReq.phone:type_name -> google.protobuf.StringValue
	16, // 7: UserUpdateReq.nickname:type_name -> google.protobuf.StringValue
	17, // 8: UserUpdateReq.sex:type_name -> google.protobuf.Int32Value
	16, // 9: UserUpdateReq.avatar_url:type_name -> google.protobuf.StringValue
	16, // 10: UserUpdateReq.introduce:type_name -> google.protobuf.StringValue
	18, // 11: UserUpdateReq.snap_call:type_name -> google.protobuf.BoolValue
	17, // 12: UserUpdateReq.add_friend_type:type_name -> google.protobuf.Int32Value
	16, // 13: UserUpdateReq.friend_pass_problem:type_name -> google.protobuf.StringValue
	16, // 14: UserUpdateReq.friend_pass_answer:type_name -> google.protobuf.StringValue
	16, // 15: UserUpdateReq.password:type_name -> google.protobuf.StringValue
	16, // 16: UserUpdateReq.id_card:type_name -> google.protobuf.StringValue
	16, // 17: UserInfoRsp.avatar_url:type_name -> google.protobuf.StringValue
	16, // 18: UserInfoRsp.introduce:type_name -> google.protobuf.StringValue
	16, // 19: UserInfoRsp.friend_pass_problem:type_name -> google.protobuf.StringValue
	16, // 20: UserInfoRsp.friend_pass_answer:type_name -> google.protobuf.StringValue
	15, // 21: UserListRsp.list:type_name -> UserListRsp.List
	16, // 22: UserListRsp.List.avatar_url:type_name -> google.protobuf.StringValue
	16, // 23: UserListRsp.List.introduce:type_name -> google.protobuf.StringValue
	16, // 24: UserListRsp.List.friend_remake:type_name -> google.protobuf.StringValue
	1,  // 25: User.Hello:input_type -> HelloReq
	3,  // 26: User.UserCreate:input_type -> UserCreateReq
	5,  // 27: User.UserUpdate:input_type -> UserUpdateReq
	7,  // 28: User.UserDelete:input_type -> UserDeleteReq
	9,  // 29: User.UserInfo:input_type -> UserInfoReq
	11, // 30: User.UserList:input_type -> UserListReq
	13, // 31: User.FriendHandle:input_type -> FriendHandleReq
	2,  // 32: User.Hello:output_type -> HelloRsp
	4,  // 33: User.UserCreate:output_type -> UserCreateRsp
	6,  // 34: User.UserUpdate:output_type -> UserUpdateRsp
	8,  // 35: User.UserDelete:output_type -> UserDeleteRsp
	10, // 36: User.UserInfo:output_type -> UserInfoRsp
	12, // 37: User.UserList:output_type -> UserListRsp
	14, // 38: User.FriendHandle:output_type -> FriendHandleRsp
	32, // [32:39] is the sub-list for method output_type
	25, // [25:32] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_v1_user_proto_init() }
func file_v1_user_proto_init() {
	if File_v1_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCreateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUpdateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeleteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendHandleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendHandleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_user_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_user_proto_goTypes,
		DependencyIndexes: file_v1_user_proto_depIdxs,
		EnumInfos:         file_v1_user_proto_enumTypes,
		MessageInfos:      file_v1_user_proto_msgTypes,
	}.Build()
	File_v1_user_proto = out.File
	file_v1_user_proto_rawDesc = nil
	file_v1_user_proto_goTypes = nil
	file_v1_user_proto_depIdxs = nil
}
